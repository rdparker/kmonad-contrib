#| --------------------------------------------------------------------------

   KMonad: My old US-Layout IBM Model-M attached to a Macbook

  This file contains the `defsrc` configuration for a standard US
  IBM Model-M keyboard. The only difference between it and the US
  ansi 100% template, is the lack of meta keys.  The original
  Model-M had none. Copy out the 'defsrc' layer to start your own
  keyboard configuration. Copy out the `deflayer` template to
  easily start a new layer with matching `transparent` buttons.

(deflayer name
  _    _    _    _    _    _    _    _    _    _    _    _    _          _    _    _
  _    _    _    _    _    _    _    _    _    _    _    _    _    _     _    _    _     _    _    _    _
  _    _    _    _    _    _    _    _    _    _    _    _    _    _     _    _    _     _    _    _    _
  _    _    _    _    _    _    _    _    _    _    _    _    _                          _    _    _
  _    _    _    _    _    _    _    _    _    _    _    _                    _          _    _    _    _
  _         _              _              _         _                    _    _    _     _    _   
)

  -------------------------------------------------------------------------- |#

;; Set the input and output sinks.
;;
;; Running "system_profiler SPUSBDataType" gives the device name for
;; the keyboard as "USBPS2" since it is connected via a PS/2-to-USB adapter.

(defcfg
  ;; ** For Linux **
  ;; input  (device-file "/dev/input/by-id/usb-Matias_Ergo_Pro_Keyboard-event-kbd") ;; Change this line for your device
  ;; output (uinput-sink "KMonad output")

  ;; ** For Windows **
  ;; input  (low-level-hook)
  ;; output (send-event-sink)

  ;; ** For MacOS **
  input  (iokit-name "USBPS2")
  output (kext)
)

;;; Aliases

;; All things tap related
;;
;; The `tap-next' button takes 2 buttons, one for tapping, one for
;; holding.  If it is pressed and released before another button is
;; pressed, the 'tapping' button will be tapped.  If it is still held
;; down when the next button is pressed, the 'holding' button will be
;; pressed, then the next button's event will be generated and after
;; the next button is released, the 'holding' button will be released.

;; The `tap-hold' button takes a timeout and the same 2 buttons as
;; `tap-next'.  If the 'tap-hold' is released before the timeout, then
;; the 'tapping' button will be tapped and any next button handled
;; after that.  If it is released after the timeout the 'holding'
;; button will be pressed.  No processing of the next button will
;; happen until the 'tap-hold' is released, or the timeout has
;; expired, but it will be processed immediately thereafter.
;;
;; Using `tap-hold-next' is a combination of the two.  It behaves like
;; `tap-next' but is also held after a period of time.  The real
;; utility is when you press the 'tap-hold-next' and decide it was a
;; mistake you can hold it until the timeout, release it without
;; touching another button and get no errant output.  With 'tap-next'
;; the 'tapping' button would be generated.
;;
;; The 'tap-next-release' button makes its decision based upon the
;; next button released that was *not* pressed before us.  In other
;; words if 'a' is pressed before 'tap-next-release' and is released
;; before 'tap-next-release' it will be treated as tapped and
;; 'tap-next-release' will still make its decision based upon the next
;; released button.
;;
;; `tap-hold-next-release' is like 'tap-next-release' but with a
;; timeout and will also jump into holding mode when the timeout is
;; hit, like 'tap-hold'.
;;
;; For home row mods, you want 'tap-hold-next-release', cf.
;; https://precondition.github.io/home-row-mods#using-home-row-mods-with-kmonad.

(defalias
  esc (tap-hold-next-release 500 esc lctl)
  rec (tap-hold-next-release 500 ret rctl)
)

;; The least to most common modifiers are:
;;
;;   GUI  < Alt    < Control < Shift - On Windows, Linux and BSDs
;;   Ctrl < Option < Command < Shift - On macOS
;;
;; The GUI key is also called the Windows key.
;;
;; In Emacs GUI/Win/Command are used as Super, but they are also used
;; by the graphical environment to manage windows, access menu items
;; and trigger application commands.
;;
;; |         | GUI/Win/Command       | Control    | Alt/Option                |
;; |---------+-----------------------+------------+---------------------------|
;; | Emacs   | Super                 | Control    | Meta                      |
;; | Windows | Windows Shortcuts     | Copy/Paste | Menu Access & Modifier    |
;; | macOS   | Copy/Paste, Shortcuts | Modifier   | Extended Chars & Modifier |
;;
;; If you work on multiple platforms, it is not uncommon to use
;; Command as Meta in Emacs because it is easier to reach with your
;; thumb than Option, and is in the same physical position as Alt on a
;; PC which is used as Meta.  Having them in the same position also
;; reduces typing confusion.
;;
;;     Mac Layout                PC Layout
;;    			     			     
;;     Shift		         Shift		     
;;     Ctrl   Option Command     Ctrl   GUI    Alt	     
;;

;; IBM Model-M Special Considerations
;;
;; In addition to my general layout changes, I remap some left and
;; right modifiers on this 1996 IBM keyboard in an OS-dependent way.
;;
;;   |           |             |         | KMonad | KMonad | Emacs      |
;;   | Key       | Mac         | PC      | Mac    | PC     | Emacs      |
;;   |-----------+-------------+---------+--------+--------+------------|
;;   | Caps Lock | control (^) | Ctrl    | ctrl   | ctrl   | Ctrl  (C-) |
;;   | Enter (⏎) | control (^) | Ctrl    | ctrl   | ctrl   | Ctrl  (C-) |
;;   | Ctrl      | option  (⌥) | Win (⊞) | alt    | meta   | Super (s-) |
;;   | Alt       | command (⌘) | Alt     | meta   | alt    | Meta  (M-) |
;;
;; Since there are conflicts between the Mac and PC mappings, I need
;; to decided whether the home row mods should apply to the GUI or
;; Emacs.  Due to how much I use Emacs, I'll go with Emacs, which
;; requires some changes in the mapping for this keyboard between the
;; two operating systems.  This only affects Emacs Super and Meta.

;; PC Mappings
#| --------------------------------------------------------------------------
(defalias
  lsuper lmet
  lmeta  lalt
  rsuper rmet
  rmeta  lalt
)
  -------------------------------------------------------------------------- |#

;; Mac Mappings
(defalias
  lsuper lalt
  lmeta  lmet
  rsuper lalt
  rmeta  rmet
)

;; Setup the Emacs home row mods
(defalias
  a/s (tap-hold-next-release 200 a @lsuper) ;; Super
  o/m (tap-hold-next-release 200 o @lmeta)  ;; Meta
  e/s (tap-hold-next-release 200 e lsft)    ;; Shift
  u/c (tap-hold-next-release 200 u lctl)    ;; Control

  h/c (tap-hold-next-release 200 h rctl)    ;; Control
  t/s (tap-hold-next-release 200 t rsft)    ;; Shift
  n/m (tap-hold-next-release 200 n @rmeta)  ;; Meta
  s/s (tap-hold-next-release 200 s @rsuper) ;; Super
)

;;; Layers

;; First up is the source (base) layer; this is used to set the default
;; keys that will be overwritten later.  It is `not' a layer that will
;; be used in the actual layout.
(defsrc
  esc  f1   f2   f3   f4   f5   f6   f7   f8   f9   f10  f11  f12        ssrq slck pause
  grv  1    2    3    4    5    6    7    8    9    0    -    =    bspc  ins  home pgup  nlck kp/  kp*  kp-
  tab  q    w    e    r    t    y    u    i    o    p    [    ]    \     del  end  pgdn  kp7  kp8  kp9  kp+
  caps a    s    d    f    g    h    j    k    l    ;    '    ret                        kp4  kp5  kp6
  lsft z    x    c    v    b    n    m    ,    .    /    rsft                 up         kp1  kp2  kp3  kprt
  lctl      lalt           spc            ralt      rctl                 left down rght  kp0  kp.
)

;; Dvorak layer
;; Since this is the first layer, it's the layout KMonad starts in.
;;
;;

(deflayer dvorak
  esc  f1   f2   f3   f4   f5   f6   f7   f8   f9   f10  f11  f12        ssrq slck pause
  grv  1    2    3    4    5    6    7    8    9    0    [    ]    bspc  ins  home pgup  nlck kp/  kp*  kp-
  tab  '    ,    .    p    y    f    g    c    r    l    /    =    \     del  end  pgdn  kp7  kp8  kp9  kp+
  @esc @a/s @o/m @e/s @u/c i    d    @h/c @t/s @n/m @s/s -    @rec                       kp4  kp5  kp6
  lsft ;    q    j    k    x    b    m    w    v    z    rsft                 up         kp1  kp2  kp3  kprt
  lalt      lmet           spc            rmet      ralt                 left down rght  kp0  kp.
)
